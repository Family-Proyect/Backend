# Generated by Django 3.0.1 on 2020-09-02 01:28

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categoria_Tema',
            fields=[
                ('id_categoria_tema', models.AutoField(primary_key=True, serialize=False)),
                ('nombre_categoria', models.CharField(blank=True, max_length=200, verbose_name='Nombre de la categoria')),
            ],
        ),
        migrations.CreateModel(
            name='Galeria',
            fields=[
                ('id_galeria', models.AutoField(primary_key=True, serialize=False)),
                ('descripcion', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tema',
            fields=[
                ('id_tema', models.AutoField(primary_key=True, serialize=False)),
                ('estado', models.IntegerField(choices=[(1, 'Revisado'), (2, 'Pendiente')])),
                ('titulo', models.CharField(max_length=100, verbose_name='Titulo del tema')),
                ('descripcion', models.TextField(blank=True, max_length='900', verbose_name='Descripcion del tema')),
                ('fecha', models.DateField(blank=True, default=datetime.datetime.now)),
                ('tema_categoria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='family.Categoria_Tema')),
            ],
        ),
        migrations.CreateModel(
            name='Videos_Tema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(blank=True, upload_to='video/', verbose_name='Video del tema')),
                ('id_tema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='family.Tema')),
            ],
        ),
        migrations.CreateModel(
            name='Videos_galeria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(blank=True, upload_to='video/', verbose_name='Video del tema')),
                ('id_galeria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='family.Galeria')),
            ],
        ),
        migrations.CreateModel(
            name='Imagenes_Tema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, upload_to='image/', verbose_name='Imagen del tema')),
                ('id_tema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='family.Tema')),
            ],
        ),
        migrations.CreateModel(
            name='Imagenes_galeria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, upload_to='image/', verbose_name='Imagen del tema')),
                ('id_galeria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='family.Galeria')),
            ],
        ),
        migrations.CreateModel(
            name='Audio_Tema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio', models.FileField(blank=True, upload_to='audio/', verbose_name='Audio del tema')),
                ('id_tema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='family.Tema')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('tipo', models.CharField(default='E', max_length=2, verbose_name='Tipos de usuario')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
